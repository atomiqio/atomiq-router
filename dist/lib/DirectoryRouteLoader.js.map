{"version":3,"sources":["../../src/lib/DirectoryRouteLoader.js"],"names":[],"mappings":"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","file":"DirectoryRouteLoader.js","sourcesContent":["import DirectoryRouteComponent from './DirectoryRouteComponent';\nimport debug from 'debug';\nimport fs from 'fs';\nimport path from 'path';\nimport { reject } from 'ramda';\n\nconst log = debug('app:directoryrouter');\n\nexport default class {\n  constructor(app) {\n    this.app = app;\n  }\n\n  get _express() {\n    return this.app.get('express');\n  }\n\n  get router() {\n    if (!this._router) {\n      this._router = this._express.Router();\n    }\n    return this._router;\n  }\n\n  join(...routeComponents) {\n    routeComponents = reject(comp => !comp, routeComponents);\n    let joined = path.join(...routeComponents);\n    if (joined.length > 1 && joined.endsWith('/')) {\n      joined = joined.substr(0, joined.length - 1);\n    }\n    return joined;\n  }\n\n  loadRouteComponents(routesPath, rootComponent) {\n    if (!rootComponent) {\n      rootComponent = new DirectoryRouteComponent(routesPath);\n    }\n\n    let currentRoot = rootComponent;\n    let files = fs.readdirSync(routesPath);\n\n    files.forEach(filename => {\n      let filepath = path.join(routesPath, filename);\n      let component = new DirectoryRouteComponent(currentRoot, filepath);\n      if (!component.isIgnored) {\n        currentRoot.add(component);\n        if (component.isDirectory || component.isParam) {\n          this.loadRouteComponents(component.filepath, component);\n        }\n      }\n    });\n\n    return rootComponent;\n  }\n\n  load(routesPath, baseRoute = '/', baseRouter = this.router) {\n    let rootComponent = this.loadRouteComponents(routesPath, rootComponent);\n    log(`routes: ${JSON.stringify(rootComponent.inspect(), null, 2)}`);\n\n    let subRouter = this._express.Router({ mergeParams: true });\n    baseRouter.use(baseRoute, subRouter);\n\n    let loadLevel = (component, route, router, param) => {\n      component.children.forEach(comp => {\n        if (comp.isFile) {\n          let Resource = require(comp.filepath).default;\n          let resource = new Resource(this.app);\n          let compRoute = comp.isIndex ? this.join('/', param) : this.join('/', param, comp.name);\n          router.use(compRoute, resource.router);\n        } else if (comp.isDirectory) {\n          let subRouter = this._express.Router({ mergeParams: true });\n          let subRoute = this.join('/', comp.name);\n          router.use(subRoute, subRouter);\n          loadLevel(comp, subRoute, subRouter);\n        } else if (comp.isParam) {\n          loadLevel(comp, route, router, comp.name);\n        }\n      });\n    };\n\n    loadLevel(rootComponent, baseRoute, subRouter);\n  }\n\n}\n"]}