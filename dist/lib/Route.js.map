{"version":3,"sources":["../../src/lib/Route.js"],"names":[],"mappings":"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","file":"Route.js","sourcesContent":["import R from 'ramda';\nimport debug from 'debug';\n\nconst defaultOptions = {\n  mergeParams: true\n};\n\n// http://expressjs.com/en/4x/api.html#app.METHOD\n// verbs in roughly descending priority order (common verbs first)\n// TODO: wrap in a set\nconst verbs = [\n  'get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace',\n  'checkout', 'connect', 'copy', 'lock',\n  'merge', 'mkactivity', 'mkcol', 'move', 'm-search',\n  'notify', 'propfind', 'proppatch', 'purge', 'report',\n  'search', 'subscribe', 'unlock', 'unsubscribe'\n];\n\nexport default class {\n  constructor(app, options = {}) {\n    this._log = debug(`app:route:${this.constructor.name.toLowerCase()}`);\n    this._app = app;\n    this._options = R.merge(defaultOptions, options);\n\n    this._updateRouter(this);\n  }\n\n  get log() {\n    return this._log;\n  }\n\n  get app() {\n    return this._app;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get router() {\n    if (!this._router) {\n      this._router = this._express.Router({\n        mergeParams: this.options.mergeParams\n      });\n    }\n    return this._router;\n  }\n\n  get _express() {\n    return this.app.get('express');\n  }\n\n  /**\n   * Update the route instance's router by matching methods\n   * named for HTTP verbs and assigning them to the router\n   */\n  _updateRouter(route) {\n\n    /*\n    (R.intersection(getMetods(route), verbs)).forEach(routeVerb => {\n      route.log(`found route handler for '${routeVerb}' method`);\n      route.router[routeVerb]('/', route[routeVerb].bind(route));\n    });\n    */\n\n    this._getMethods(route).forEach(method => {\n      let verb = this._startsWithVerb(method);\n      if (verb) {\n        let spec = this._routeify(method);\n        if (spec) {\n          route.log(`found route handler for '${spec.verb}' method`);\n          route.router[spec.verb](spec.route, route[method].bind(route));\n        }\n      }\n    });\n  }\n\n  /**\n   * Get the methods defined on the instance's class\n   */\n  _getMethods(instance) {\n    let methods = Object.getOwnPropertyNames(Object.getPrototypeOf(instance));\n    return methods.filter(prop => {\n      return typeof instance[prop] === 'function';\n    });\n  }\n\n  /**\n   * If methods starts with a recognized verb, return the verb, otherwise undefined\n   */\n  _startsWithVerb(method) {\n    for (let i = 0; i < verbs.length; i++) {\n      if (method.startsWith(verbs[i])) {\n        return verbs[i];\n      }\n    }\n  }\n\n  _routeify(method) {\n    method = method.replace(/\\$/, ':');\n\n    let result = {};\n    let parts = method.split('_');\n\n    result.verb = parts.shift();\n    result.route = `/${parts.join('/')}`;\n\n    if (!R.contains(result.verb, verbs)) {\n      return;\n    }\n    return result;\n  }\n}\n"]}